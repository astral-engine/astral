@startuml structure

!include doc/skinparam.iuml

class Registry<Resource<LoadData>, LoadData> {
    + set_catalog(Catalog)
    + create(Name) -> ResourceId
    + create_from(Location) -> ResourceId
    + state(ResourceId) -> State
}
Registry *-- "* " Resource

interface Resource <<(T, #b4a7e5)>>

enum State {
    + Unknown
    + Creating
    + Created
    + Loading
    + Loaded
    + Unloading
    + Destroying
}

package assets {
class Catalog {
    + add(Namespace) -> NamespaceId
    + remove(NamespaceId) -> Namespace?
    ..
    + valid(Location) -> Boolean
    + exists(Location) -> Boolean
    + modified(Location) -> Time
    + open(Location) -> Read
}
Catalog *--> "* " Namespace
Catalog <-o Registry

class Namespace {
    + add(VirtualFileSystem) -> VfsIndex
    + remove(VfsIndex)
    + clear()
    + reload(VfsIndex)
    ..
    + create(Name, VfsIndex?) -> Write
    + create_new(Name, VfsIndex?) -> Write
    + exists(Name) -> Boolean
    + modified(Name) -> Time
    + open(Name) -> Read
    + remove(Name)
}
Namespace *--> "* " VirtualFileSystem

interface VirtualFileSystem <<(T, #b4a7e5)>> {
    + {abstract} name() -> Name
    + {abstract} readonly() -> Boolean
    + {abstract} iter() -> Iter<Path>
    ..
    + {abstract} create(Name) -> Write
    + {abstract} create_new(Name) -> Write
    + {abstract} exists(Name) -> Boolean
    + {abstract} modified(Name) -> Time
    + {abstract} open(Name) -> Read
    + {abstract} remove(Name)

}
}

interface LoadData <<(T, #b4a7e5)>> {
    + resource_id() -> ResourceId
}

class ResourceId {
    + namespace_id
    + name
}

class Resource<LoadData> {
    + load(LoadData)
    + unload()
}
Registry . ResourceId
Registry .. LoadData
LoadData . Resource
' ResourceId .. State
' State . Registry
Resource -- State
ResourceId -- Resource



' ResourceId o-- Name
' NamespaceId --o ResourceId
' Catalog o- "* " Manifest
' Manifest o-- ResourceId
' Manifest o- Type

' class TypeRegistry {
'     + register(Type, Loader)
'     + unregister()
'     + registered()
' }


' class LoadData {
'     + read()
'     + registry()
'     + manifest()
' }

' class ResourceGroup {
'     + declare(ResourceId[, Loader])
'     + undeclare(ResourceId)
'     + set_loader(Loader)
' }

' interface Loader <<(T, #b4a7e5)>> {
'     + {abstract} create()
'     + {abstract} load(LoadData)
'     + {abstract} unload()
'     + {abstract} destroy()
' }
' Loader "* " -o Catalog
' Loader .. LoadData

' class Declaration {
'     + resource_id
'     + loader
' }

' Registry o-- "* " ResourceGroup
' Registry o- Catalog
' Catalog o-- "* " Location
' Manifest -> Location

' LocationCache *-- LocationSet
' Location -o LocationCache
' Catalog o- LocationSet
' Location <-- LocationSet

' ResourceGroup o- Loader

' ResourceGroup  *-- "* " Declaration
' Loader <-- Declaration

' Declaration <-- Registry
' Location <-* LocationManifest
' LocationManifest --* Registry

' Registry *--> LoadingRegistry

' LoadingRegistry o- Loader
' LocationManifest <.. LoadData
' LoadData .. Loader
' Registry <. LoadData


@enduml
